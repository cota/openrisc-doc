Building the OpenRISC Toolchain
===============================

The commands below make use of an environment variable, PREFIX, which specifies
the installation directory for the toolchain.  If you export this variable into
your environment, then you can make use of the commands below verbatim; 
otherwise, you need to replace the occurences of $PREFIX below with the
installation path.

These build instructions make use of a few environment variables.  The
easiest way to follow these build instructions is to export these variables
into your environment, as follows:

----
export PREFIX=/opt/or1k-toolchain
export TARGET=or32-linux
export SYSROOT=$PREFIX/$TARGET/sys-root
----

If you decide not to make use of these environment variables, you will have
to adjust the commands in the rest of this document accordingly.

Binutils
--------

Get binutils from git:

----
$ git clone git://openrisc.net/jonas/binutils-svn
----

Then build:

----
$ mkdir binutils-build
$ cd binutils-build
$ ../binutils-svn/configure --target=$TARGET --prefix=$PREFIX --with-sysroot
$ make
$ make install
----

Stage 1 GCC
-----------

Building GCC requires that the binutils utilities that were just built are available in the search path:

----
$ export PATH=$PREFIX/bin:$PATH
----


Get GCC from git:

----
git clone git://openrisc.net/jonas/gcc-svn
----

----
$ mkdir gcc-build
$ cd gcc-build
$ ../gcc-4.5.1/configure --target=or32-linux --prefix=<prefix> \
--disable-libssp --srcdir=../gcc-svn --enable-languages=c      \
--without-headers --enable-threads=single --disable-libgomp    \
--disable-libmudflap
$ make
$ make install
----

Install Linux Headers
---------------------

The next step is build our target C library.  Building libC requires that Linux
headers be installed.  For that we'll need to check out the kernel:

----
$ git clone ...
----

...and install the headers into the target sysroot.

---- 
$ make INSTALL_HDR_PATH=$PREFIX/$TARGET/sys-root/usr headers_install
$ make INSTALL_HDR_PATH=${SYSROOT}/usr headers_install
----

Compile uClibc
--------------

IMPORTANT:  uClibc respects the value of the $PREFIX environment variable,
so if you exported this variable above then the default configuration is
all you need.

NOTE: xyz

The default configuration for uClibc makes use of the environment variables
PREFIX and TARGET.  If you did not export these into your environment
earlier, then you will need to adjust the uClibc configuration accordingly.

remember to setup devel_prefix, cross_compile_prefix, linux header location

and install

important here is that libc.a gets installed to {prefix}/or32-linux/lib/

m

----
make PREFIX=${SYSROOT}
make PREFIX=${SYSROOT} install
----


Stage 2 GCC
-----------

Now that we have a libC for our target, it's time to build the compiler.  This
"second stage" build will use the C library that we just finished building.

----
 $ mkdir gcc-build-2
 $ cd gcc-build-2
 $ ../gcc-svn/configure --target=or32-linux --prefix=$PREFIX   \
--disable-libssp --srcdir=../gcc-svn --enable-languages=c      \
--enable-threads=posix --disable-libgomp --disable-libmudflap  \
--with-sysroot
 $ make
 $ make install
----

If you want C++, try this instead... important to be explicit about --disable-shared here because libstdc++-v3 isn't clever enough to figure it out for itself.

----
 $ ../gcc-svn/configure --target=or32-linux --prefix=<prefix>   \
--disable-libssp --srcdir=../gcc-svn --enable-languages=c,c++   \
--enable-threads=posix --disable-libgomp --disable-libmudflap   \
--disable-shared --with-sysroot
----

And rebuild uClibc
------------------

Now that the final GCC build is complete, uClibc can be built with the final compiler.  This is simple a matter of doing a clean rebuild...

----
$ make clean
$ make; make install
----

Busybox
-------

----
$ git clone ...
----

Configure BusyBox using menuconfig:

----
make menuconfig
----

BusyBox uses three important Makefile variables for controlling how to build
and where to install.

 CROSS_COMPILE: the prefix to apply to 'gcc' to get the cross compiler
 CONFIG_EXTRA_CFLAGS: extra flags to pass to the compiler
 CONFIG_PREFIX: where to install

When using a non-default sysroot, we need to make sure that the compiler
can find the necessary header files and libraries; that's where the
CONFIG_EXTRA_CFLAGS come in.

Then build BusyBox, specifying the CROSS_COMPILE prefix and the CONFIG_PREFIX
for the intallation directory.



----
$ make CROSS_COMPILE=or32-linux-
$ make CROSS_COMPILE=or32-linux- CONFIG_PREFIX=$SYSROOT install
----

----
$ make CONFIG_EXTRA_CFLAGS="--sysroot=$SYSROOT" CROSS_COMPILE=or32-linux- \
CONFIG_PREFIX=$SYSROOT install
----

Actually, the best thing is to export CFLAGS:

----
$ export CFLAGS="--sysroot=$SYSROOT"
$ make CROSS_COMPILE=or32-linux- CONFIG_PREFIX=$SYSROOT install
----



Build Linux
-----------

don't forget to set cross-compiler prefix to or32-linux
---
$ git clone ...
---

$ make ARCH=openrisc defconfig
$ make



or1ksim
-------

The Linux source tree contains a suitable or1ksim config file...

----
$ sim -f arch/openrisc/or1ksim.cfg vmlinux
----
